import requests
import random
import re
from datetime import datetime
import os
from github import Github

# Configuration pour les tests locaux et GitHub Actions
def get_github_token():
    """R√©cup√®re le token GitHub depuis l'environnement ou utilise un token de test"""
    # 1. Essayer de r√©cup√©rer depuis la variable d'environnement (pour GitHub Actions)
    token = os.environ.get("GITHUB_TOKEN")
    
    # 2. Si pas de token dans l'environnement, utiliser un token cod√© en dur pour les tests
    # ATTENTION: Ce token devrait √™tre retir√© avant de pousser le code dans un d√©p√¥t
    if not token:
        # POUR LES TESTS UNIQUEMENT - √Ä SUPPRIMER AVANT DE POUSSER SUR GITHUB
        token = "Github_Token" # Utilisez un nouveau token ici pour le test
    
    return token

# Informations utilisateur
GITHUB_USERNAME = "HenriSaumure"
REPOSITORY_NAME = "HenriSaumure"

def get_github_stats():
    """Obtenir les vraies statistiques GitHub en utilisant l'API"""
    try:
        # Obtenir le token
        token = get_github_token()
        if not token:
            raise Exception("Token GitHub non disponible")
            
        # Cr√©er une instance Github avec le token
        g = Github(token)
        
        # R√©cup√©rer les informations de l'utilisateur
        user = g.get_user(GITHUB_USERNAME)
        
        # R√©cup√©rer les statistiques r√©elles
        stats = {
            'public_repos': user.public_repos,
            'followers': user.followers,
            'following': user.following,
            'name': user.name if user.name else GITHUB_USERNAME,
        }
        return stats
    except Exception as e:
        print(f"Erreur lors de la r√©cup√©ration des statistiques: {e}")
        # En cas d'erreur, utiliser des valeurs par d√©faut
        return {
            'public_repos': 0,
            'followers': 0,
            'following': 0,
            'name': GITHUB_USERNAME,
        }

def generate_phrase():
    """G√©n√©rer une phrase al√©atoire avec les vraies statistiques en fran√ßais"""
    stats = get_github_stats()
    
    # Format de date conforme √† votre exemple
    current_date = datetime.now().strftime("%Y-%m-%d")
    
    phrases = [
        f"üëã Bonjour! Je poss√®de {stats['public_repos']} d√©p√¥ts publics et {stats['followers']} abonn√©s.",
        f"üöÄ Je maintiens actuellement {stats['public_repos']} projets publics avec une communaut√© de {stats['followers']} abonn√©s formidables!",
        f"üíª Consultez mes {stats['public_repos']} d√©p√¥ts si vous √™tes int√©ress√© par ce que je d√©veloppe.",
        f"üìä Statistiques actuelles: {stats['public_repos']} d√©p√¥ts publics, {stats['followers']} abonn√©s, {stats['following']} abonnements.",
        f"üåü Merci aux {stats['followers']} personnes qui suivent mon travail sur mes {stats['public_repos']} projets!",
        f"üìÜ Aujourd'hui ({current_date}), je compte {stats['followers']} abonn√©s et {stats['public_repos']} projets.",
    ]
    
    return random.choice(phrases)

def update_readme():
    """Mettre √† jour le README avec le nouveau contenu en utilisant l'API GitHub"""
    try:
        # Obtenir le token
        token = get_github_token()
        if not token:
            print("‚ö†Ô∏è Erreur: Token GitHub non disponible!")
            return
            
        # Connexion √† GitHub
        g = Github(token)
        repo = g.get_repo(f"{GITHUB_USERNAME}/{REPOSITORY_NAME}")
        
        try:
            # Obtenir le contenu actuel du README
            contents = repo.get_contents("README.md")
            readme_content = contents.decoded_content.decode("utf-8")
        except:
            # Si le README n'existe pas encore, cr√©er un contenu par d√©faut
            readme_content = f"""# Bienvenue sur mon profil!

<!-- SECTION_DYNAMIQUE_DEBUT -->
<!-- Cette section sera automatiquement mise √† jour par le script -->
<!-- SECTION_DYNAMIQUE_FIN -->

## Mes Projets
N'h√©sitez pas √† explorer mes d√©p√¥ts pour d√©couvrir mes projets!
"""
        
        # G√©n√©rer le nouveau contenu
        new_phrase = generate_phrase()
        current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S UTC")
        
        # Mettre √† jour la section dynamique
        pattern = r"<!-- SECTION_DYNAMIQUE_DEBUT -->.*<!-- SECTION_DYNAMIQUE_FIN -->"
        replacement = f"<!-- SECTION_DYNAMIQUE_DEBUT -->\n{new_phrase}\n\n*Derni√®re mise √† jour: {current_time}*\n<!-- SECTION_DYNAMIQUE_FIN -->"
        
        if re.search(pattern, readme_content, re.DOTALL):
            # Si les marqueurs existent, mettre √† jour la section
            updated_content = re.sub(pattern, replacement, readme_content, flags=re.DOTALL)
        else:
            # Si les marqueurs n'existent pas, ajouter la section au d√©but
            updated_content = f"""# Bienvenue sur mon profil!

{replacement}

## Mes Projets
N'h√©sitez pas √† explorer mes d√©p√¥ts pour d√©couvrir mes projets!
"""
        
        # V√©rifier si le README existe d√©j√†
        try:
            # Mettre √† jour le fichier existant
            repo.update_file(
                path="README.md",
                message="Mise √† jour du README avec un nouveau contenu dynamique",
                content=updated_content,
                sha=contents.sha
            )
            print("‚úÖ README mis √† jour avec succ√®s!")
        except:
            # Cr√©er le fichier s'il n'existe pas
            repo.create_file(
                path="README.md",
                message="Cr√©ation du README avec contenu dynamique",
                content=updated_content
            )
            print("‚úÖ README cr√©√© avec succ√®s!")
            
    except Exception as e:
        print(f"‚ö†Ô∏è Erreur lors de la mise √† jour du README: {e}")

def preview_update():
    """Aper√ßu de la mise √† jour sans toucher au d√©p√¥t"""
    phrase = generate_phrase()
    current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S UTC")
    
    print("\n=== APER√áU DE LA MISE √Ä JOUR ===")
    print(f"{phrase}")
    print(f"\nDerni√®re mise √† jour: {current_time}")
    print("===================================\n")

if __name__ == "__main__":
    # Si nous sommes dans GitHub Actions, mettre √† jour le README
    if os.environ.get("GITHUB_ACTIONS") == "true":
        update_readme()
    else:
        # Sinon, afficher un aper√ßu et demander confirmation
        preview_update()
        response = input("Voulez-vous mettre √† jour le README maintenant? (o/n): ")
        if response.lower() in ('o', 'oui', 'y', 'yes'):
            update_readme()
        else:
            print("Mise √† jour annul√©e.")